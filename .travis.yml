sudo: required
language: c
services: docker

env:
  global:
    - DOCKERHUB_IMG=yhnw/openwrt-sdk
    - PKG_REPOS_URL=https://github.com/hnw/openwrt-packages.git
    - PKG_NAME=nkf
    - OPENWRT_GID=1000
    - GCS_ACCESS_KEY_ID=GOOGZU4AGJJUVQ4DLX52
    - GCS_BUCKET=hnw-gcs-bucket-for-travis
    - GCS_UPLOAD_DIR="$(basename ${TRAVIS_REPO_SLUG})-${TRAVIS_BUILD_NUMBER}"
    - secure: "SW2CLUe5AjKDeZg0xifuWR5G6t2SYzkp05Q5OEuJlLVUSE+L9hqaTmGwnsS2VYWNOYxxCjo3Wl/fx5hbfPYCPIg9ITczSTWTBo3TCHZ3IJeVYa4BxN55LTb4y7jY6tO11GfdlMsgDMpIJIK9VD+3xQWVkmYj0vIGt+qYZIBmCuI4bvUwVB6Wn0GSZMa4qKkWYH5MEynWgCHFIjwQ6LWIhoCOcoJ9iE6RM2YdVtNosCbtFeR2+41/67TQ46cAGea2HPJfuwS6hkOpSq+1+1AFhRwOJPyfejZ/SpUYfSCsDraPlMEKHSzXBmVvbnSrEqwpsuBRhhih3Hi833kJWq+Rbq73zdSZafwpOiMlmFCxsvo56LDp6QZYKMqjFgkLmnnx0mudXKSwHwoJNdF3uD2ctV9TH3RFk5igqJyDVxO29gTTZx1QrNVx7tbFXJREYnCH9AKBcDcI05caA447w2hB4Nqqz6yQnr/FdIHdgXPLDIi3Hnmtx4ndlKLISoYgWUZ7yXBA3DZDcBAhL6YPiI1yda1OEjVUawKkkChVfLwtufSU8lMv2YCwnuQGVPTvuoUUKnTMiF4a0HWxQcSGlhRB2D+aFNc8/Y/OuZkRbUcispj53PbFntKdaCjXLh/jCQfhkfhe1KDN0iusclA4vziXEcXegOiJlajAnkE2JHnO4kA="
    - VERBOSE=1
  matrix:
    - DOCKERHUB_TAG=15.05.1-ar71xx      BUILD_DIR=bin/ar71xx/packages        OUT_DIR=15.05.1/mips_24kc
    - DOCKERHUB_TAG=17.01-ar71xx        BUILD_DIR=bin/packages/mips_24kc     OUT_DIR=17.01/mips_24kc
    - DOCKERHUB_TAG=17.01-ramips-mt7620 BUILD_DIR=bin/packages/mipsel_24kc   OUT_DIR=17.01/mipsel_24kc
    - DOCKERHUB_TAG=17.01-bcm53xx       BUILD_DIR=bin/packages/arm_cortex-a9 OUT_DIR=17.01/arm_cortex-a9

script:
  - mkdir -p $PWD/pkgs
  - scripts/chgrp-for-docker.sh -g $OPENWRT_GID $PWD/pkgs
  - docker run --rm -u openwrt -v $PWD:/work ${DOCKERHUB_IMG}:${DOCKERHUB_TAG} /bin/bash /work/scripts/build.sh $PKG_NAME $BUILD_DIR /work /work/pkgs $OUT_DIR $VERBOSE
  - ls -la

after_failure:
  - if [[ -e pkgs/build.log ]] ; then tail -300 pkgs/build.log ; fi

before_deploy:
  - |
    if [[ -n ${TRAVIS_TAG} || -n ${TRAVIS_BRANCH} && ${TRAVIS_BRANCH} == "master" ]] ; then
        scripts/extract-encrypted-tar.sh -K $encrypted_1176d606f0a3_key -iv $encrypted_1176d606f0a3_iv secrets.tar.enc
        if [[ -e $HOME/.ssh ]] ; then
            mv $HOME/.ssh $HOME/.ssh.orig
        fi
        if [[ -n ${TRAVIS_TAG} ]] ; then
            echo "This build is triggered by tag: preparing deploy-key for pushing binary packages"
            mv .ssh_for_push_pkgs $HOME/.ssh
        else
            echo "We are on master branch: preparing deploy-key for pushing release tag"
            mv .ssh_for_push_tag $HOME/.ssh
        fi
    fi

deploy:
  - provider: releases
    api_key:
      secure: "DA5hzrVsrpOF6ezFGC1TV0BG1ok+iyMBSmj6dBKqBYLcWvk+reH+BQimizkf358gND28wQ3KaQuefi7W1dTvr1/so/UkcudWJJzZBetUuswojyeMaS+yJsfIZyHRYRgwjHgCXMHSlvDeZSTe0PNk5rJKWzHpaVnqx1JXcx9llSi4AfnYfcugpeK97h4drhNXnzS+087T7pQ+oMn3AzZG2fafVSIn6rkVecA11fn4CNDlT97GvI++JW8LdbMrSkzpcOfPHeJu2gm6HewHLC+x5pIliyWfmX5hMS7PdVhkpPRASjNfmPVS40J5SGnF2TXz4JRNX7U5qBXu0ROQWJ8Xo1ofHXYQ0HrtSVPV6CtfXzdMc5A9F0Tpco8VBw3cg4Wt6TqZxF8W2GicguI0olagaD4k/CvM1IVEO1/7wg4fdtxCxkLN3qsEhrpZ+NnSpSlZyClHnLIXVWg1eM/KgK0/9CBKrlWvN516OWJs90HO2smms9ixdhxllK+u8+1p7ArToPSdLBO9IAXoswwI2ZHzHqBNCKDOs/IuSOUICHnsvCL8wo8THIcGssyAzR+PONfPwA1jGTC9tt/IhVOffYa7WuXPCizeJ6iIxANgdVzKano/+9rZj1avKQErYx3xKXKaHD9rvB9W0fnl9UQGbUXF65KNd1Ix32m2cqncOwElXYw="
    file_glob: true
    file: "pkgs/flattened/*.ipk"
    skip_cleanup: true
    on:
      tags: true
  - provider: gcs
    access_key_id: ${GCS_ACCESS_KEY_ID}
    secret_access_key: ${GCS_SECRET_ACCESS_KEY}
    bucket: ${GCS_BUCKET}
    skip_cleanup: true
    local-dir: pkgs/structured/
    upload-dir: ${GCS_UPLOAD_DIR}
    all_branches: true
  - provider: gcs
    access_key_id: ${GCS_ACCESS_KEY_ID}
    secret_access_key: ${GCS_SECRET_ACCESS_KEY}
    bucket: ${GCS_BUCKET}
    skip_cleanup: true
    local-dir: pkgs/structured/
    upload-dir: ${GCS_UPLOAD_DIR}
    on:
      tags: true

jobs:
  include:
    - if: branch = master
      stage: Push release tag
      script: skip
      deploy:
        - provider: script
          script: scripts/push-tag.sh
    - if: tag IS present
      stage: Publish binary packages to repos
      script:
        - git clone --branch=master ${PKG_REPOS_URL} ../repos
        - envsubst < .boto.in > $HOME/.boto
        - gsutil cp -r s3://${GCS_BUCKET}/${GCS_UPLOAD_DIR}/'*' ../repos
      deploy:
        - provider: script
          script: scripts/push-pkgs.sh ../repos
          on:
            tags: true
